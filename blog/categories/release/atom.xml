<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Release, | digress]]></title>
  <link href="http://dudzik.co/blog/categories/release/atom.xml" rel="self"/>
  <link href="http://dudzik.co/"/>
  <updated>2014-11-24T17:18:54+01:00</updated>
  <id>http://dudzik.co/</id>
  <author>
    <name><![CDATA[Frederik Dudzik]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Say Hello to Rubysierung.]]></title>
    <link href="http://dudzik.co/blog/2014/11/16/say-hello-to-rubysierung/"/>
    <updated>2014-11-16T21:59:35+01:00</updated>
    <id>http://dudzik.co/blog/2014/11/16/say-hello-to-rubysierung</id>
    <content type="html"><![CDATA[<p>After reading <a href="http://devblog.avdi.org/">Avdi Grimm&rsquo;s</a> book &ldquo;<a href="http://www.confidentruby.com/">Confident Ruby</a>” and my work on <a href="https://github.com/doodzik/CallBaecker">CallBaecker</a> and <a href="https://github.com/doodzik/defp">defp</a> I had an Idea for an implementation of “static typing” in Ruby.
My goal was to build a shorthand for ruby’s conversion methods syntactic similar to other languages.
By relying on ruby’s conversion methods I preserved the initial flexibility of ruby. Furthermore I’ve added extended Error messages to ease debuging code. And you can add custom types.</p>

<p>So I’m happy to publish my take on ”static typing” in ruby.</p>

<h2>what it looks like</h2>

<pre><code class="ruby">class ExampleClass
  extend Rubysierung
  include CallBaecker

  def buz(foo: String, bar: Strict::String)
    [foo, bar]
  end
end
</code></pre>

<h2>what it translates to</h2>

<pre><code class="ruby">class ExampleClass
  extend Rubysierung
  include CallBaecker

    def buz(foo: , bar: )
    foo = foo.to_s
    bar = bar.to_str
    [foo, bar]
  end
end
</code></pre>

<h2>what types are supported</h2>

<pre><code class="ruby">  [
  # Type ,     explicid, implicid
    [String,   :to_s,    :to_str],
    [Integer,  :to_i,    :to_int],
    [Array,    :to_a,    :to_ary],
    [Complex,  :to_c,    :to_c],
    [Float,    :to_f,    :to_f],
    [Hash,     :to_h,    :to_hash],
    [Rational, :to_r,    :to_r],
    [IO,       :to_io,   :to_io],
    [Proc,     :to_proc, :to_proc],
    [Symbol,   :to_sym,  :to_sym],
    [Thread,   :join,    :join]
  ]
</code></pre>

<p>In the future I want to add the possibility to use default values with a specified type.
If you have any additional types, ideas or enhancements, feel free to open a pull request, issue or leave a comment :)</p>

<p>Head over to the <a href="https://github.com/doodzik/rubysierung">repository</a>.</p>
]]></content>
  </entry>
  
</feed>
